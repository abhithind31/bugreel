
Technical Blueprint for "BugReel": A Personal Bug Reporting Tool


Section 1: Foundational Architecture and System Design

This document outlines the complete technical blueprint for "BugReel," a personal-use bug reporting and session replay tool inspired by the functionality of Jam.dev. The architecture is designed for a solo developer, prioritizing simplicity, core functionality, and client-side processing to eliminate the need for complex backend infrastructure and ongoing server costs.

1.1 Core Philosophy: The "Personal Use" Constraint

Commercial tools like Jam.dev are architected to support collaborative software development teams. Their feature sets include shared workspaces, user roles and permissions, administrative controls like Single Sign-On (SSO), and deep integrations with project management platforms such as Jira, Linear, and Slack.1 These features necessitate a robust, multi-tenant backend, user authentication systems, and persistent cloud storage, which introduce significant architectural complexity and operational overhead.
The "personal use" constraint for BugReel is the single most important factor shaping its design. It fundamentally alters the architectural paradigm from a client-server model to a purely client-side application. This decision allows for the complete removal of a backend server, user accounts, and collaborative features. The primary deliverable of the tool will not be a link to a cloud-hosted report, but rather a single, self-contained HTML file. This file can be saved locally, shared via email or any file-sharing service, and opened in any modern web browser for replay. This approach offers several key advantages for a personal tool: maximum privacy, as no data ever leaves the user's machine; zero server costs; and a dramatically simplified development and maintenance lifecycle.

1.2 System Components Overview

The BugReel system is logically divided into three primary components, each with a distinct responsibility in the capture-to-replay pipeline. This modular design ensures a clear separation of concerns, making the system easier to develop, debug, and extend.
The Capture Engine (Browser Extension): This is the core user-facing component, implemented as a modern Chrome Manifest V3 extension.4 It is responsible for initiating the capture process and collecting all raw data streams from the active browser tab. The extension itself is a composite of several sub-components working in concert: a popup for user interaction, a service worker for orchestration, content scripts for in-page data gathering, and an offscreen document to handle media recording.5
The Data Aggregator & Packager: This is a logical module residing within the extension's service worker. Its sole function is to act as the central repository for all incoming data streams from the Capture Engine. It receives video data, console logs, network requests, and environment metadata. It then processes this data—most critically, by scrubbing it for personally identifiable information (PII) and secrets—before bundling it into a coherent package ready for final assembly.
The Report Viewer (Self-Contained HTML): This is the final, tangible output of the BugReel tool. It is a single .html file that encapsulates all captured data and the necessary presentation logic. The file contains the recorded video, all technical logs, environment details, and the required HTML, CSS, and JavaScript to render an interactive and synchronized replay experience, completely offline and without external dependencies.

1.3 Data Flow Diagram

The following diagram illustrates the sequence of events and the flow of data between the system components during a typical capture session.

Code snippet


sequenceDiagram
    participant User
    participant Popup UI
    participant Service Worker
    participant Offscreen Doc
    participant Content Script
    participant Target Page

    User->>Popup UI: Clicks "Start Recording"
    Popup UI->>Service Worker: Sends "startCapture" message
    Service Worker->>Offscreen Doc: Creates document and starts MediaRecorder via getDisplayMedia
    Service Worker->>Content Script: Sends "startLogging" message
    Content Script->>Target Page: Overrides console.* and adds event listeners
    Target Page-->>Content Script: Emits console logs and user events
    Content Script-->>Service Worker: Relays captured data
    Service Worker->>Service Worker: Intercepts network requests via chrome.webRequest

    User->>Popup UI: Clicks "Stop Recording"
    Popup UI->>Service Worker: Sends "stopCapture" message
    Service Worker->>Offscreen Doc: Stops MediaRecorder, receives video Blob
    Service Worker->>Content Script: Sends "stopLogging" message
    Service Worker->>Service Worker: Aggregates all data (video, logs, network, meta)
    Service Worker->>Service Worker: Packages data into a self-contained HTML file
    Service Worker-->>User: Triggers download of the final report.html file



1.4 Table: Feature Implementation Overview

To provide a strategic overview of the development effort, the following table maps each core feature of BugReel to the primary technologies required for its implementation, an estimated complexity level for a solo developer, and its key dependencies. This serves as a high-level project plan, enabling prioritization and a clear understanding of the technical scope.
Feature
Core Technology/API
Implementation Complexity (Personal Use)
Key Dependencies / Permissions
Screen/Tab Recording
getDisplayMedia, MediaRecorder
Medium
offscreen document, activeTab
Console Log Capture
Content Script console override
Low
scripting, host_permissions
Network Request Capture
chrome.webRequest API
Medium
webRequest, host_permissions
Environment Metadata
navigator.userAgentData, screen
Low
N/A
PII/Secret Scrubbing
Custom Regex/String matching
Medium
N/A
Self-Contained HTML Report
FileReader, Base64 encoding, Blob
Medium
JSZip (for alternative ZIP approach)
AI Debugging Assistant
External LLM API (fetch)
High
API Key, Prompt Engineering
Screenshot Annotation
HTML <canvas>, tabs.captureVisibleTab
Medium
activeTab


Section 2: The Capture Engine - Browser Extension (Manifest V3)

The Capture Engine is the heart of BugReel, responsible for all data collection. Its architecture is dictated by the constraints and capabilities of the Chrome Extension Manifest V3 platform.

2.1 Manifest Configuration (manifest.json)

The manifest.json file is the blueprint for the extension, declaring its capabilities, permissions, and components to the browser.4 The configuration for BugReel will be as follows:

JSON


{
  "manifest_version": 3,
  "name": "BugReel",
  "version": "1.0",
  "description": "A personal tool for capturing developer-ready bug reports.",
  "permissions":,
  "host_permissions": [
    "<all_urls>"
  ],
  "background": {
    "service_worker": "background.js"
  },
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "images/icon16.png",
      "48": "images/icon48.png",
      "128": "images/icon128.png"
    }
  },
  "icons": {
    "16": "images/icon16.png",
    "48": "images/icon48.png",
    "128": "images/icon128.png"
  }
}


Permissions Breakdown:
storage: Used for persisting user settings or session state.
activeTab & scripting: Essential for programmatically injecting the content script into the currently active tab upon user action, without requiring broad, upfront permissions.
webRequest: Grants the ability to observe and analyze network traffic, which is crucial for the network logging feature.9
offscreen: A mandatory permission in Manifest V3 to create and use an offscreen document. This is necessary because DOM-dependent APIs like getDisplayMedia cannot be called from a service worker.7
Host Permissions: <all_urls> is required for the webRequest and scripting APIs to function on any website the user might be debugging.

2.2 Core Components Architecture


Background Service Worker (background.js)

The service worker acts as the central coordinator for the entire extension.4 It manages the application's state (e.g.,
isRecording), orchestrates the start and stop of all data capture processes, serves as the message bus between the popup and content scripts, and performs the final aggregation and packaging of the bug report.
A critical architectural consideration for Manifest V3 is the non-persistent nature of service workers. The browser may terminate the service worker at any time to conserve resources and restart it when an event it's listening for occurs. This means the service worker is effectively stateless. To manage state across these terminations, such as the current recording status, BugReel will leverage the chrome.storage.session API. This API provides in-memory storage that persists for the lifetime of the browser session, making it an ideal lightweight solution for managing transient state without writing to disk.

Content Scripts (content.js)

The content script is the extension's agent inside the target web page.4 It is not declared statically in the manifest but is injected programmatically into the active tab by the service worker using
chrome.scripting.executeScript(). This on-demand injection is a best practice for performance and security. The content script's primary responsibilities are to intercept console messages by wrapping the native console object and to listen for user interactions like clicks and key presses to generate reproduction steps. It operates in an "isolated world," meaning it cannot conflict with the host page's JavaScript, but it shares access to the same DOM.12 All captured data is sent unidirectionally to the service worker via
chrome.runtime.sendMessage().

Popup UI (popup.html, popup.js)

The popup provides the minimal user interface for interacting with the extension.4 It will contain essential controls like "Start Recording" and "Stop Recording." The popup's lifecycle is ephemeral; its JavaScript context is created when the popup is opened and destroyed when it is closed. Therefore, it holds no persistent state. Any user action within
popup.js will immediately dispatch a message to the service worker, which is responsible for all state management and long-running operations.

Offscreen Document (offscreen.html)

The offscreen document is a technical necessity imposed by Manifest V3's restrictions.7 APIs that require access to the DOM, specifically
getDisplayMedia and MediaRecorder, cannot be called from the service worker's non-DOM context. To solve this, the service worker will programmatically create a minimal, invisible HTML page (offscreen.html) using the chrome.offscreen API. This document's sole purpose is to host the screen recording logic. It will listen for messages from the service worker to start or stop recording and will pass the resulting video data Blob back to the service worker upon completion.

Section 3: Data Capture Engine - Technical Implementation

This section provides a granular, code-level blueprint for implementing each of the data capture modules within the BugReel extension.

3.1 Screen and Audio Recording

The visual recording is the centerpiece of the bug report, providing irrefutable evidence of the issue. Jam.dev offers robust recording options, including desktop, tab, and microphone audio capture.13 BugReel will replicate this using standard Web APIs.14
Implementation Steps:
Initiation: The service worker, upon receiving a "start" message, will first check if an offscreen document already exists. If not, it will create one using chrome.offscreen.createDocument({ url: 'offscreen.html', reasons:, justification: 'Recording screen and audio for bug report.' });.
Media Request: The script within offscreen.html will use navigator.mediaDevices.getDisplayMedia({ video: true, audio: true }) to prompt the user to select a display source. The audio: true flag will attempt to capture system or tab audio, depending on the user's selection and OS support.18
Microphone Capture: To simultaneously capture the user's voice for narration, a separate call to navigator.mediaDevices.getUserMedia({ audio: true }) is required.
Audio Stream Merging: A significant technical challenge is that MediaRecorder can only accept a single stream. Therefore, the audio from the display source and the microphone must be merged. This will be accomplished using the Web Audio API.19
Create a new AudioContext().
Create a MediaStreamAudioSourceNode for the display audio stream and another for the microphone audio stream.
Create a MediaStreamAudioDestinationNode. This node acts as a virtual output device.
Connect both source nodes to the destination node using sourceNode.connect(destinationNode).
The destinationNode.stream property will now contain a MediaStream with a single, mixed audio track.
Recorder Initialization: The video track from getDisplayMedia and the merged audio track from the AudioContext are combined into a new MediaStream. This final stream is then passed to the MediaRecorder: recorder = new MediaRecorder(finalStream, { mimeType: 'video/webm; codecs=vp9' });. WebM with VP9 is chosen for its good compression and wide browser support.
Data Collection: An event listener for recorder.ondataavailable will collect the video data chunks into an array.
Completion: When the "stop" message is received, recorder.stop() is called. The onstop event handler will then construct a single Blob from the collected data chunks and send it back to the service worker for packaging.

3.2 Console Log Interception

Access to the developer console output is critical for debugging JavaScript errors.1 This is achieved by overriding the native
console object in the content script.
Implementation Steps (in content.js):
Method Wrapping: To avoid breaking the page's existing logging functionality, the original console methods must be preserved before they are replaced.21
JavaScript
const originalConsole = {
  log: console.log,
  warn: console.warn,
  error: console.error,
  info: console.info,
  debug: console.debug
};

['log', 'warn', 'error', 'info', 'debug'].forEach(level => {
  console[level] = function(...args) {
    // 1. Send the log to the service worker
    try {
      chrome.runtime.sendMessage({
        type: 'CONSOLE_LOG',
        payload: {
          level: level,
          // Use a safe serialization method
          message: safeJsonStringify(args),
          timestamp: new Date().toISOString()
        }
      });
    } catch (e) {
      // Handle cases where the message port is closed during page unload
    }

    // 2. Execute the original console method to maintain normal page behavior
    originalConsole[level].apply(console, args);
  };
});


Safe Serialization: A simple JSON.stringify(args) will fail if the logged arguments contain circular references (common in complex objects) or non-serializable types like DOM elements. A custom safeJsonStringify function is required. This function will traverse the object graph, replacing circular references with a placeholder like "[Circular]" and converting DOM elements into a descriptive string like "<div id='my-element' class='container'>". This ensures the logging mechanism is robust and does not crash the content script.
Data Aggregation: The service worker will listen for 'CONSOLE_LOG' messages and push each payload into an array stored in chrome.storage.session to persist it across potential service worker restarts.

3.3 Network Request Logging

Understanding the network traffic provides context on API calls, asset loading, and other server interactions.20 The
chrome.webRequest API is the primary tool for this.9
Implementation Steps (in background.js):
Event Listeners: Register listeners for the key stages of the request lifecycle: onBeforeRequest, onBeforeSendHeaders, onHeadersReceived, onCompleted, and onErrorOccurred.
Request Correlation: Use the requestId provided in each event's details object to correlate all events belonging to a single network request. An in-memory Map (e.g., new Map()) will be used to store requests that are currently in flight, keyed by their requestId.
Lifecycle Tracking:
onBeforeRequest: Create a new entry in the in-flight map with the requestId, URL, method, and start timestamp.
onBeforeSendHeaders: Add the request headers to the corresponding entry in the map.
onHeadersReceived: Add the response status code and response headers.
onCompleted / onErrorOccurred: Finalize the entry with completion status and timing information, then move it from the in-flight map to a final array of completed requests.
Capturing Request and Response Bodies: The chrome.webRequest API does not provide access to request or response bodies for security and performance reasons. This is a significant limitation. To capture this crucial data, a hybrid approach is necessary:
Content Script Instrumentation: In the content script (content.js), the native window.fetch function and the XMLHttpRequest.prototype.send and XMLHttpRequest.prototype.open methods will be wrapped.
Data Extraction: Within these wrappers, the request body can be accessed before sending, and the response body can be accessed after the request completes (e.g., by chaining onto the promise returned by fetch or by listening to the load event on XHR).
Correlation: The captured body data, along with the URL and method, will be sent to the service worker. The service worker will then use the URL and a close timestamp to heuristically match this body data with the corresponding request metadata captured by chrome.webRequest. While not perfect, this is a common and effective pattern for achieving comprehensive network logging in an extension.

3.4 Client-Side Security: PII/Secret Scrubbing

This is a critical, non-negotiable security and privacy feature. Jam.dev performs this scrubbing on the client side before data is ever transmitted.23 BugReel will adopt the same principle, ensuring sensitive data is never even written to the local report file.
Implementation:
Define Patterns: A configuration file will contain an array of regular expressions designed to detect common secret formats and PII keywords. Examples include:
Header keys: /^authorization$/i, /^x-api-key$/i, /^cookie$/i
Body keys/values: /"password":\s*".*?"/g, /"token":\s*".*?"/g
Common formats: AWS keys (/AKIA[0-9A-Z]{16}/g), JWTs (/ey[A-Za-z0-9-_=]+\.ey[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*/g)
Scrubbing Logic: A recursive function will be created to traverse the collected network data (headers and JSON bodies).
Redaction: When a key or value matches a defined pattern, its value will be completely replaced with a placeholder string, such as "".
Application Point: This scrubbing function must be applied to all network log data within the Data Aggregator module in the service worker before the final report is packaged.

3.5 Environment & User Action Logging

Context is key for bug reproduction. This includes both the technical environment and the sequence of user actions that led to the bug.2
Environment Metadata Capture:
Browser/OS: The modern User-Agent Client Hints API (navigator.userAgentData) will be used as the primary source for reliable browser and OS information.24 A fallback to parsing the legacy
navigator.userAgent string will be implemented for compatibility.25
Display: window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and window.devicePixelRatio will be captured to understand the user's screen and viewport size.
Locale: navigator.language and navigator.languages will be recorded.
User Action Logging (Simplified Repro Steps):
Instead of a complex and resource-intensive full DOM replay, BugReel will generate a simple, human-readable log of user actions.
In the content script, global event listeners will be attached to the document for click, keydown, and input events.
For each event, a payload will be created containing the event type, a timestamp, and a CSS selector for the event target (e.g., button#submit.btn-primary).
URL changes will be tracked by listening for the hashchange and popstate events, as well as by wrapping history.pushState and history.replaceState.
This data provides a clear, step-by-step list of actions that a developer can follow to reproduce the issue.

Section 4: The Report Assembler and Viewer

This section details the final stage of the process: packaging all captured data into a portable format and creating the interactive application to view it.

4.1 Data Packaging Strategy: The Self-Contained HTML File

The primary goal is to create a single, portable file that works anywhere without dependencies. Embedding all assets directly into an HTML file is the most elegant solution for this use case.27
Implementation Steps:
HTML Template: A template literal string in background.js will define the entire structure of the report viewer's HTML. This template will include placeholders for the data to be injected.
Video Embedding: The video Blob received from the offscreen document will be converted into a Base64 data URL using FileReader.readAsDataURL(). The resulting lengthy string will be injected directly into the src attribute of a <video> tag within the HTML template.
JSON Data Embedding: All collected log data (console, network, user actions, environment) will be serialized into JSON strings using JSON.stringify(). These strings will then be embedded within the HTML inside <script> tags with a type="application/json" attribute and a unique ID (e.g., <script type="application/json" id="console-data">...</script>). This is a standard and robust method for embedding data payloads in an HTML document, preventing them from being executed as JavaScript while making them easily accessible via the DOM.30
Final Assembly and Download:
Once all placeholders in the template string are filled, a new Blob is created from the final HTML string: new Blob(, { type: 'text/html' }).
URL.createObjectURL() is used to generate a temporary local URL for this blob.
An invisible <a> element is created in the service worker, its href is set to the object URL, its download attribute is set to a filename like bugreel-report.html, and its click() method is programmatically called to initiate the file download.
Finally, URL.revokeObjectURL() is called to clean up the temporary URL.

4.2 Alternative Strategy: ZIP Packaging

For scenarios involving extremely large video recordings, Base64 encoding can lead to performance issues and very large file sizes. A ZIP archive offers a more efficient alternative.
Implementation:
Using a client-side library like JSZip 31 or the more modern
client-zip 33, the service worker can package the report differently:
Create a new zip instance.
Add the raw video Blob as video.webm.
Add the various log arrays as separate JSON files (e.g., console.json, network.json).
Add a standard index.html file to the zip, which will act as the viewer.
Generate the zip file as a Blob and trigger the download.
The primary disadvantage of this method is the user experience. The user must manually unzip the archive and locate and open the index.html file, which is less seamless than opening a single file. For this reason, the self-contained HTML approach remains the primary recommendation.

4.3 The Viewer Application (report.html)

The viewer is a mini-application embedded within the report file itself. Its purpose is to present the captured data in an interactive and synchronized way.
UI Layout: The interface will be a clean, two-column layout.
Left Column: A large HTML5 <video> player with standard playback controls (play, pause, seek bar, volume).
Right Column: A tabbed interface to organize the large volume of technical data.
"Console" Tab: A virtual console that renders each log entry. Entries will be styled based on their severity level (error in red, warn in yellow) to improve scannability.
"Network" Tab: A list of all captured network requests. Each entry will be clickable, expanding to reveal a detailed view of request/response headers and the scrubbed body content.
"Info" Tab: Displays the static environment metadata (OS, browser, screen size) and the chronological list of user actions for easy reproduction.
Synchronization Logic: This is the core feature that makes the replay valuable.
Data Loading: Upon page load, the viewer's embedded JavaScript will access the JSON data from the <script type="application/json"> tags using document.getElementById('...').textContent and parse it into JavaScript objects.
Event Listener: A timeupdate event listener will be attached to the <video> element. This event fires repeatedly as the video plays.
Real-time Highlighting: Inside the timeupdate handler, the script will get the video.currentTime. It will then perform a search through the timestamped log arrays (console, network, user actions) to find the entries whose timestamps are closest to the current video time.
UI Update: A CSS class (e.g., .active-log-entry) will be applied to the corresponding log entry's DOM element in the UI, highlighting it for the user. The view will also automatically scroll to bring the highlighted entry into view. This creates a powerful, synchronized playback experience, allowing the developer to see exactly what was happening in the console and network at the precise moment an action was performed on screen.

Section 5: Advanced Capabilities (Post-MVP)

Once the core functionality of BugReel is stable, these advanced features can be added to enhance its power, mirroring the evolution of commercial tools like Jam.dev.

5.1 AI Debugging Assistant

Jam.dev heavily leverages AI to analyze bug reports and suggest fixes, a significant value-add for developers.34 BugReel can incorporate a similar feature using external Large Language Model (LLM) APIs.
Implementation:
UI Element: An "Analyze with AI" button will be added to the report viewer's UI.
Data Serialization: When clicked, a JavaScript function will gather all relevant context from the parsed data: all console errors, a summary of failed network requests (URL, status, method), the environment information, and the list of user reproduction steps. This data will be serialized into a single, well-structured text block.
Prompt Engineering: A carefully crafted prompt will be constructed to guide the LLM. For example:"You are an expert full-stack web developer tasked with debugging a user-reported issue. Analyze the following session data to determine the root cause. Provide a clear, step-by-step explanation of your reasoning and suggest a specific code fix, including code snippets if applicable.
Console Errors:
[...console errors...]
Failed Network Requests:
[...failed network requests...]
User Actions:
[...repro steps...]
Environment:
[...environment info...]"
API Call: The fetch API will be used to make a POST request to a public LLM API endpoint (e.g., OpenAI, Anthropic, Google). The user will be required to configure their own API key in the extension's settings page for this feature to work.
Display Response: The response from the LLM will be streamed and displayed in a modal window or a dedicated "AI Analysis" tab within the viewer, providing instant debugging assistance.

5.2 Screenshot Annotation

For simpler visual bugs, a quick, annotated screenshot is often more efficient than a full video recording. This is a common feature in many screen capture tools.36
Implementation:
UI Element: A "Take Screenshot" button will be added to the extension's popup UI.
Capture: On click, the service worker will call chrome.tabs.captureVisibleTab(). This returns a Base64 data URL of the currently visible portion of the active tab.
Annotation UI: A new browser tab will be opened, loading a dedicated annotation page (annotate.html) from the extension's package. The data URL of the screenshot will be passed to this page as a URL parameter.
Canvas Drawing: The annotation page will use an HTML <canvas> element. It will first draw the screenshot image onto the canvas. Then, using a library like marker.js 39 or a custom implementation, it will provide the user with tools to draw shapes (rectangles, arrows), add text, and apply blurs.
Save and Download: A "Save" button on the annotation page will call canvas.toDataURL('image/png') to get the Base64 representation of the final, annotated image. This data URL will then be used to trigger a download of the .png file.

Section 6: Phased Development Roadmap

To manage complexity, the development of BugReel should proceed in logical phases. This iterative approach allows for the creation of a functional core product first, with refinements and advanced features added over time.
Phase 1: Core Capture & Extension Foundation
Goal: Establish the basic data capture pipeline.
Tasks:
Initialize the Manifest V3 extension project with the correct permissions and structure.
Build the minimal popup UI (popup.html, popup.js).
Implement the content script for console log interception and relaying data to the service worker.
Implement network request interception using chrome.webRequest for headers and metadata only.
Implement environment data collection.
Milestone: At the end of this phase, clicking "Stop" should successfully log a single JSON object containing all captured text-based data to the service worker's console.
Phase 2: Video & The Self-Contained Viewer
Goal: Create the final, replayable report file.
Tasks:
Implement the Offscreen Document to manage getDisplayMedia and MediaRecorder.
Implement the Web Audio API logic for merging system and microphone audio streams.
Build the data packaging module in the service worker to assemble the self-contained HTML file.
Develop the basic HTML, CSS, and JavaScript for the report viewer, including the two-column layout and the logic to parse the embedded data.
Milestone: A downloadable .html file is produced, which, when opened, plays the recorded video and displays the static log data.
Phase 3: Synchronization and Refinements
Goal: Transform the static viewer into an interactive, synchronized replay tool.
Tasks:
Implement the timeupdate event listener on the video element to synchronize playback with the log displays.
Implement the client-side PII/secret scrubbing module and integrate it into the data aggregation pipeline.
Refine the UI/UX of the viewer, such as adding collapsible sections for network requests and improving log styling.
Implement the simplified user-action logging and display it in the viewer.
Milestone: The report viewer provides a fully synchronized, interactive debugging experience.
Phase 4: Advanced Features
Goal: Add high-value, "power-user" capabilities.
Tasks:
Integrate with an external LLM API to provide the AI Debugging Assistant feature.
Implement the standalone screenshot capture and annotation workflow.
Milestone: BugReel is a feature-rich personal debugging tool that goes beyond simple recording to offer advanced analysis and communication options.
Works cited
Jam - Chrome Web Store, accessed on July 12, 2025, https://chromewebstore.google.com/detail/jam/iohjgamcilhbgmhbnllfolmkmmekfmci
Overview of jam.dev - Askpot, accessed on July 12, 2025, https://askpot.com/directory/jam.dev
Mission and Values - Jam.dev, accessed on July 12, 2025, https://jam.dev/docs/company/mission-and-values
All you'll ever need to know about Chrome Extensions | by Aggelos Arvanitakis | ITNEXT, accessed on July 12, 2025, https://itnext.io/all-youll-ever-need-to-know-about-chrome-extensions-ceede9c28836
Webext : background.js, content.js, popup.js | by hugolpz - Medium, accessed on July 12, 2025, https://hugolpz.medium.com/webext-background-js-content-js-popup-js-f48109fe0842
Architecture overview | Manifest V2 - Chrome for Developers, accessed on July 12, 2025, https://developer.chrome.com/docs/extensions/mv2/architecture-overview
Extensions / Samples - Chrome for Developers, accessed on July 12, 2025, https://developer.chrome.com/docs/extensions/samples
Chrome Extension Tutorial: How to Pass Messages from a Page's Context - freeCodeCamp, accessed on July 12, 2025, https://www.freecodecamp.org/news/chrome-extension-message-passing-essentials/
chrome.webRequest | API | Chrome for Developers, accessed on July 12, 2025, https://developer.chrome.com/docs/extensions/reference/api/webRequest
How to Intercept HTTP requests in web extension ? | GeeksforGeeks, accessed on July 12, 2025, https://www.geeksforgeeks.org/how-to-intercept-http-requests-in-web-extension/
Manage events with background scripts | Manifest V2 - Chrome for Developers, accessed on July 12, 2025, https://developer.chrome.com/docs/extensions/mv2/background-pages
Extension Architecture - Google Groups, accessed on July 12, 2025, https://groups.google.com/a/chromium.org/g/chromium-extensions/c/umZocTE74ng
Jam: AI-Powered Bug Reports are Here - YouTube, accessed on July 12, 2025, https://www.youtube.com/watch?v=D-aNqEMQV38
How to record the user's screen | Media patterns | web.dev, accessed on July 12, 2025, https://web.dev/patterns/media/screen-record
Screen Capture - W3C, accessed on July 12, 2025, https://www.w3.org/TR/screen-capture/
MediaDevices: getDisplayMedia() method - Web APIs | MDN, accessed on July 12, 2025, https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia
getDisplayMedia Screensharing Tutorial - GetStream.io, accessed on July 12, 2025, https://getstream.io/resources/projects/webrtc/basics/screensharing/
MediaDevices.getDisplayMedia() - Web APIs, accessed on July 12, 2025, https://udn.realityripple.com/docs/Web/API/MediaDevices/getDisplayMedia
Using getDisplayMedia to record the screen, system or browser tab audio, and the microphone, accessed on July 12, 2025, https://addpipe.com/get-display-media-demo/
Jam.dev – An Effective Tool for Bug Reproduction, accessed on July 12, 2025, https://dev.to/namnguyenthanhwork/jamdev-an-effective-tool-for-bug-reproduction-1979
Intercept calls to console.log in Chrome - javascript - Stack Overflow, accessed on July 12, 2025, https://stackoverflow.com/questions/9216441/intercept-calls-to-console-log-in-chrome
Experience the power of faster bug tracking with Jam, accessed on July 12, 2025, https://jam.dev/blog/unleash-the-power-of-bug-tracking/
Security | Jam Documentation - Jam.dev, accessed on July 12, 2025, https://jam.dev/docs/product-features/devtools/security
Navigator: userAgentData property - Web APIs | MDN, accessed on July 12, 2025, https://developer.mozilla.org/en-US/docs/Web/API/Navigator/userAgentData
Browser detection using the user agent string (UA sniffing) - HTTP - MDN Web Docs, accessed on July 12, 2025, https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Browser_detection_using_the_user_agent
How to determine the OS in your web app via Javascript - flaming.codes, accessed on July 12, 2025, https://flaming.codes/posts/how-to-determine-os-in-browser
How to create self-contained HTML files in Quarto - 2025 Update - YouTube, accessed on July 12, 2025, https://www.youtube.com/watch?v=uNqHzlJ0_uo
Creating a self-contained HTML : r/orgmode - Reddit, accessed on July 12, 2025, https://www.reddit.com/r/orgmode/comments/7dyywu/creating_a_selfcontained_html/
Extracting JSON Embedded Within A Generate HTML File In ColdFusion - Ben Nadel, accessed on July 12, 2025, https://www.bennadel.com/blog/4632-extracting-json-embedded-within-a-generate-html-file-in-coldfusion.htm
How to embed JSON in html? - javascript - Stack Overflow, accessed on July 12, 2025, https://stackoverflow.com/questions/54490611/how-to-embed-json-in-html
JSZip, accessed on July 12, 2025, https://stuk.github.io/jszip/
Create Zip Files with JavaScript - David Walsh Blog, accessed on July 12, 2025, https://davidwalsh.name/javascript-zip
Touffy/client-zip: A client-side streaming ZIP generator - GitHub, accessed on July 12, 2025, https://github.com/Touffy/client-zip
Welcome to Jam | Jam.dev, accessed on July 12, 2025, https://jam.dev/docs
AI Debugger | Jam.dev, accessed on July 12, 2025, https://jam.dev/docs/debug-a-jam/ai-debugger
Top 8 screen recorder Chrome extensions you must try! - CapCut, accessed on July 12, 2025, https://www.capcut.com/resource/screen-recorder-chrome-extension
List of 6 Screen Recorder Chrome Extensions: Totally Free 2022 - Ninjacapture, accessed on July 12, 2025, https://ninjacapture.com/screen-recorder-chrome-extensions
Our 7 Favorite Chrome Extensions for Screen Capture (2024) - Atlassian, accessed on July 12, 2025, https://www.atlassian.com/blog/loom/chrome-extensions-for-screen-capture
marker.js - add image annotation to your web app, accessed on July 12, 2025, https://markerjs.com/
